/*
 * Copyright (c) 2018 ISP RAS (http://www.ispras.ru)
 * Ivannikov Institute for System Programming of the Russian Academy of Sciences
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

before: file ("$this")
{
#include <linux/types.h>
#include <ldv/linux/common.h>
#include <ldv/linux/err.h>
#include <ldv/verifier/common.h>
#include <ldv/verifier/memory.h>
#include <ldv/verifier/nondet.h>

#ifndef __LINUX_ALLOC_ASPECT
#define __LINUX_ALLOC_ASPECT

void *ldv_alloc_macro(gfp_t flags)
{
	ldv_check_alloc_flags(flags);
	return ldv_malloc_unknown_size();
}

#endif /* __LINUX_ALLOC_ASPECT */
}

/* Functions which has parameter of type gfp_t. */
pointcut ALLOC: execution(static inline struct page *alloc_pages(.., gfp_t flags, ..)) ||
				call(struct page *alloc_pages_vma(.., gfp_t flags, ..)) ||
				execution(static inline struct sk_buff *alloc_skb(.., gfp_t flags, ..)) ||
				execution(static inline struct sk_buff *alloc_skb_fclone(.., gfp_t flags, ..)) ||
				call(struct sk_buff *skb_copy(.., gfp_t flags, ..)) ||
				execution(static inline struct sk_buff *skb_share_check(.., gfp_t flags, ..)) ||
				call(struct sk_buff *skb_clone(.., gfp_t flags, ..)) ||
				execution(static inline struct sk_buff *skb_unshare(.., gfp_t flags, ..)) ||
				/* __dev_alloc_skb() calls alloc_skb() so we don't need to instrument it. */
				call(struct urb *usb_alloc_urb(.., gfp_t flags, ..)) ||
				/* This is rather optional for SLAB memory subsystem, just for SLUB. */
				execution(static inline void *kmalloc_node(.., gfp_t flags, ..))
				/* This function isn't static inline and has no body to be instrumented among related to a driver files. So instrument calls to it. */ ||
				call(void *kmem_cache_alloc(.., gfp_t flags, ..)) ||
				call(void *mempool_alloc(.., gfp_t flags, ..)) ||
				call(void *dma_pool_alloc(.., gfp_t flags, ..)) ||
				call(void *krealloc(.., gfp_t flags, ..)) ||
				call(struct sk_buff *__netdev_alloc_skb(.., gfp_t flags, ..)) ||
				call(void *usb_alloc_coherent(.., gfp_t flags, ..)) ||
				call(struct sk_buff *skb_copy_expand(.., gfp_t flags, ..)) ||
				execution(static inline void *dma_zalloc_coherent(.., gfp_t flags, ..)) ||
				execution(static inline void *dma_alloc_coherent(.., gfp_t flags, ..))

pointcut ALLOC_RETURN_INT: call(unsigned long __get_free_pages(.., gfp_t flags, ..)) ||
						   call(int usb_submit_urb(.., gfp_t flags, ..)) ||
						   call(int mempool_resize(.., gfp_t flags, ..)) ||
						   call(int pskb_expand_head(.., gfp_t flags, ..))

/* Separately weave *zalloc*() bacause it should not call kmalloc() in the body. */
pointcut ZALLOC_KNOWN_SIZE: execution(static inline void *kzalloc_node(.., gfp_t flags, ..))

pointcut ZALLOC_AUX: execution(static inline void *kmem_cache_zalloc(.., gfp_t flags, ..))

/* Functions without parameter of type gfp_t. Implicit flag GFP_KERNEL. */
pointcut ALLOC_WITHOUT: call(void *vmalloc(..)) ||
						call(void *vzalloc(..)) ||
						call(void *vmalloc_user(..)) ||
						call(void *vmalloc_node(..)) ||
						call(void *vzalloc_node(..)) ||
						call(void *vmalloc_exec(..)) ||
						call(void *vmalloc_32(..)) ||
						call(void *vmalloc_32_user(..))

pointcut alloc_macro: define(alloc_pages(gfp_mask, order)) ||
					  define(alloc_page_vma(gfp_mask, vma, addr))

around: ALLOC
{
	ldv_check_alloc_flags(flags);
	return ldv_malloc_unknown_size();
}

around: ALLOC_RETURN_INT
{
	ldv_check_alloc_flags(flags);
	return (unsigned int) ldv_malloc_unknown_size();
}

around: ZALLOC_KNOWN_SIZE
{
	void *res;
	ldv_check_alloc_flags(flags);
	res = ldv_zalloc_unknown_size();
	return res;
}

around: ZALLOC_AUX
{
	ldv_check_alloc_flags(flags);
	return ldv_zalloc_unknown_size();
}

around: ALLOC_WITHOUT
{
	ldv_check_alloc_nonatomic();
	return ldv_malloc_unknown_size();
}

around: alloc_macro
{
ldv_alloc_macro(gfp_mask)
}
