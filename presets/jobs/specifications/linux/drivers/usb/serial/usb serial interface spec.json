{
  "2.6.33": {
    "categories": {
      "usb_serial": {
        "callbacks": {
          "attach": {
            "declaration": "int (*attach)(%usb_serial.usb_serial%)"
          },
          "close": {
            "declaration": "void (*close)(%usb_serial.usb_serial_port%)"
          },
          "disconnect": {
            "declaration": "void (*disconnect)(%usb_serial.usb_serial%)"
          },
          "open": {
            "declaration": "int (*open)(%usb_serial.tty_struct%, %usb_serial.usb_serial_port%)"
          },
          "port_probe": {
            "declaration": "int (*port_probe)(%usb_serial.usb_serial_port%)"
          },
          "port_remove": {
            "declaration": "int (*port_remove)(%usb_serial.usb_serial_port%)"
          },
          "probe": {
            "declaration": "int (*probe)(%usb_serial.usb_serial%, %usb_serial.usb_device_id%)"
          },
          "release": {
            "declaration": "void (*release)(%usb_serial.usb_serial%)"
          },
          "resume": {
            "declaration": "int (*resume)(%usb_serial.usb_serial%)"
          },
          "suspend": {
            "declaration": "int (*suspend)(%usb_serial.usb_serial%, pm_message_t message)"
          },
          "write": {
            "declaration": "int (*write)(%usb_serial.tty_struct%, %usb_serial.usb_serial_port%, const unsigned char *buf, int count)"
          }
        },
        "containers": {
          "usb_serial_driver": {
            "declaration": "struct usb_serial_driver driver",
            "fields": {
              "attach": "%usb_serial.attach%",
              "close": "%usb_serial.close%",
              "disconnect": "%usb_serial.disconnect%",
              "open": "%usb_serial.open%",
              "port_probe": "%usb_serial.port_probe%",
              "port_remove": "%usb_serial.port_remove%",
              "probe": "%usb_serial.probe%",
              "release": "%usb_serial.release%",
              "resume": "%usb_serial.resume%",
              "suspend": "%usb_serial.suspend%",
              "write": "%usb_serial.write%"
            },
            "headers": [
              "linux/usb.h",
              "linux/usb/serial.h"
            ]
          }
        },
        "resources": {
          "tty_struct": {
            "declaration": "struct tty_struct *str",
            "header": "linux/tty.h",
            "implemented in kernel": true
          },
          "usb_device_id": {
            "declaration": "const struct usb_device_id *id",
            "header": "linux/mod_devicetable.h",
            "implemented in kernel": false
          },
          "usb_serial": {
            "declaration": "struct usb_serial *serial",
            "headers": [
              "linux/usb.h",
              "linux/usb/serial.h"
            ],
            "implemented in kernel": true
          },
          "usb_serial_port": {
            "declaration": "struct usb_serial_port *port",
            "headers": [
              "linux/usb.h",
              "linux/usb/serial.h"
            ],
            "implemented in kernel": true
          }
        }
      }
    },
    "functions models": {
      "usb_serial_deregister": {
        "declaration": "void usb_serial_deregister(*%usb_serial.usb_serial_driver%)",
        "headers": [
          "linux/usb.h",
          "linux/usb/serial.h"
        ]
      },
      "usb_serial_register": {
        "declaration": "int usb_serial_register(*%usb_serial.usb_serial_driver%)",
        "headers": [
          "linux/usb.h",
          "linux/usb/serial.h"
        ]
      }
    }
  },
  "3.14": {
    "categories": {
      "usb_serial": {
        "callbacks": {
          "attach": {
            "declaration": "int (*attach)(%usb_serial.usb_serial%)"
          },
          "chars_in_buffer": {
            "declaration": "int  (*chars_in_buffer)(%usb_serial.tty_struct%)"
          },
          "close": {
            "declaration": "void (*close)(%usb_serial.usb_serial_port%)"
          },
          "compat_ioctl": {
            "declaration": "void (*close)(%usb_serial.usb_serial_port%)"
          },
          "disconnect": {
            "declaration": "void (*disconnect)(%usb_serial.usb_serial%)"
          },
          "flush_buffer": {
            "declaration": "void (*close)(%usb_serial.usb_serial_port%)"
          },
          "get_icount": {
            "declaration": "int  (*get_icount)(%usb_serial.tty_struct%, struct serial_icounter_struct *icount)"
          },
          "hangup": {
            "declaration": "void (*close)(%usb_serial.usb_serial_port%)"
          },
          "ioctl": {
            "declaration": "int (*ioctl)(%usb_serial.tty_struct%, unsigned int cmd, long unsigned int arg)"
          },
          "open": {
            "declaration": "int (*open)(%usb_serial.tty_struct%, %usb_serial.usb_serial_port%)"
          },
          "poll": {
            "declaration": "void (*close)(%usb_serial.usb_serial_port%)"
          },
          "port_probe": {
            "declaration": "int (*port_probe)(%usb_serial.usb_serial_port%)"
          },
          "port_remove": {
            "declaration": "int (*port_remove)(%usb_serial.usb_serial_port%)"
          },
          "prepare_write_buffer": {
            "declaration": "int (*prepare_write_buffer)(struct usb_serial_port *port, void *dest, size_t size)"
          },
          "probe": {
            "declaration": "int (*probe)(%usb_serial.usb_serial%, %usb_serial.usb_device_id%)"
          },
          "read": {
            "declaration": "void (*close)(%usb_serial.usb_serial_port%)"
          },
          "release": {
            "declaration": "void (*release)(%usb_serial.usb_serial%)"
          },
          "reset_resume": {
            "declaration": "int (*reset_resume)(%usb_serial.usb_serial%)"
          },
          "resume": {
            "declaration": "int (*resume)(%usb_serial.usb_serial%)"
          },
          "set_termios": {
            "declaration": "void (*set_termios)(%usb_serial.tty_struct%, %usb_serial.usb_serial_port%, struct ktermios *old)"
          },
          "suspend": {
            "declaration": "int (*suspend)(%usb_serial.usb_serial%, pm_message_t message)"
          },
          "throttle": {
            "declaration": "void (*throttle)(%usb_serial.tty_struct%)"
          },
          "tiocmget": {
            "declaration": "int  (*tiocmget)(%usb_serial.tty_struct%)"
          },
          "tiocmiwait": {
            "declaration": "int  (*tiocmiwait)(%usb_serial.tty_struct%, long unsigned int arg)"
          },
          "tiocmset": {
            "declaration": "int  (*tiocmset)(%usb_serial.tty_struct%, unsigned int set, unsigned int clear)"
          },
          "unthrottle": {
            "declaration": "void (*unthrottle)(%usb_serial.tty_struct%)"
          },
          "wait_until_sent": {
            "declaration": "void (*wait_until_sent)(%usb_serial.tty_struct%, long int timeout)"
          },
          "write": {
            "declaration": "int (*write)(%usb_serial.tty_struct%, %usb_serial.usb_serial_port%, const unsigned char *buf, int count)"
          },
          "write_room": {
            "declaration": "int  (*write_room)(%usb_serial.tty_struct%)"
          },
          "read_int_callback": {
            "declaration": "void (*read_int_callback)(%usb_serial.urb%)"
          },
          "write_int_callback": {
            "declaration": "void (*write_int_callback)(%usb_serial.urb%)"
          },
          "read_bulk_callback": {
            "declaration": "void (*read_bulk_callback)(%usb_serial.urb%);"
          },
          "write_bulk_callback": {
            "declaration": "void (*write_bulk_callback)(%usb_serial.urb%);"
          },
          "process_read_urb": {
            "declaration": "void (*process_read_urb)(%usb_serial.urb%);"
          }
        },
        "containers": {
          "usb_serial_driver": {
            "declaration": "struct usb_serial_driver driver",
            "fields": {
              "attach": "%usb_serial.attach%",
              "chars_in_buffer": "%usb_serial.chars_in_buffer%",
              "close": "%usb_serial.close%",
              "compat_ioctl": "%usb_serial.compat_ioctl%",
              "disconnect": "%usb_serial.disconnect%",
              "flush_buffer": "%usb_serial.flush_buffer%",
              "get_icount": "%usb_serial.get_icount%",
              "hangup": "%usb_serial.hangup%",
              "ioctl": "%usb_serial.ioctl%",
              "open": "%usb_serial.open%",
              "poll": "%usb_serial.poll%",
              "port_probe": "%usb_serial.port_probe%",
              "port_remove": "%usb_serial.port_remove%",
              "prepare_write_buffer": "%usb_serial.prepare_write_buffer%",
              "probe": "%usb_serial.probe%",
              "read": "%usb_serial.read%",
              "release": "%usb_serial.release%",
              "reset_resume": "%usb_serial.reset_resume%",
              "resume": "%usb_serial.resume%",
              "set_termios": "%usb_serial.set_termios%",
              "suspend": "%usb_serial.suspend%",
              "throttle": "%usb_serial.throttle%",
              "tiocmget": "%usb_serial.tiocmget%",
              "tiocmiwait": "%usb_serial.tiocmiwait%",
              "tiocmset": "%usb_serial.tiocmset%",
              "unthrottle": "%usb_serial.unthrottle%",
              "wait_until_sent": "%usb_serial.wait_until_sent%",
              "write": "%usb_serial.write%",
              "write_room": "%usb_serial.write_room%",
              "read_int_callback": "%usb_serial.read_int_callback%",
              "write_int_callback": "%usb_serial.write_int_callback%",
              "read_bulk_callback": "%usb_serial.read_bulk_callback%",
              "write_bulk_callback": "%usb_serial.write_bulk_callback%",
              "process_read_urb": "%usb_serial.process_read_urb%"
            },
            "headers": [
              "linux/usb.h",
              "linux/usb/serial.h"
            ]
          }
        },
        "reference": true,
        "resources": {
          "tty_struct": {
            "declaration": "struct tty_struct *str",
            "header": "linux/tty.h",
            "implemented in kernel": true
          },
          "usb_device_id": {
            "declaration": "const struct usb_device_id *id",
            "header": "linux/mod_devicetable.h",
            "implemented in kernel": false
          },
          "usb_serial": {
            "declaration": "struct usb_serial *serial",
            "headers": [
              "linux/usb.h",
              "linux/usb/serial.h"
            ],
            "implemented in kernel": true
          },
          "usb_serial_port": {
            "declaration": "struct usb_serial_port *port",
            "headers": [
              "linux/usb.h",
              "linux/usb/serial.h"
            ],
            "implemented in kernel": true
          },
          "urb": {
            "declaration": "struct urb *urb",
            "headers": [
              "linux/usb.h",
              "linux/usb/serial.h"
            ],
            "implemented in kernel": true
          }
        }
      }
    },
    "functions models": {
      "usb_serial_deregister_drivers": {
        "declaration": "void usb_serial_deregister_drivers(struct usb_serial_driver *const serial_drivers[])",
        "headers": [
          "linux/usb.h",
          "linux/usb/serial.h"
        ],
        "reference": true
      },
      "usb_serial_register_drivers": {
        "declaration": "int usb_serial_register_drivers(struct usb_serial_driver *const serial_drivers[], const char *name, %usb_serial.usb_device_id%)",
        "headers": [
          "linux/usb.h",
          "linux/usb/serial.h"
        ],
        "reference": true
      }
    }
  },
  "3.2": {
    "categories": {
      "usb_serial": {
        "callbacks": {
          "attach": {
            "declaration": "int (*attach)(%usb_serial.usb_serial%)"
          },
          "close": {
            "declaration": "void (*close)(%usb_serial.usb_serial_port%)"
          },
          "disconnect": {
            "declaration": "void (*disconnect)(%usb_serial.usb_serial%)"
          },
          "open": {
            "declaration": "int (*open)(%usb_serial.tty_struct%, %usb_serial.usb_serial_port%)"
          },
          "port_probe": {
            "declaration": "int (*port_probe)(%usb_serial.usb_serial_port%)"
          },
          "port_remove": {
            "declaration": "int (*port_remove)(%usb_serial.usb_serial_port%)"
          },
          "probe": {
            "declaration": "int (*probe)(%usb_serial.usb_serial%, %usb_serial.usb_device_id%)"
          },
          "release": {
            "declaration": "void (*release)(%usb_serial.usb_serial%)"
          },
          "resume": {
            "declaration": "int (*resume)(%usb_serial.usb_serial%)"
          },
          "suspend": {
            "declaration": "int (*suspend)(%usb_serial.usb_serial%, pm_message_t message)"
          },
          "write": {
            "declaration": "int (*write)(%usb_serial.tty_struct%, %usb_serial.usb_serial_port%, const unsigned char *buf, int count)"
          }
        },
        "containers": {
          "usb_serial_driver": {
            "declaration": "struct usb_serial_driver driver",
            "fields": {
              "attach": "%usb_serial.attach%",
              "close": "%usb_serial.close%",
              "disconnect": "%usb_serial.disconnect%",
              "open": "%usb_serial.open%",
              "port_probe": "%usb_serial.port_probe%",
              "port_remove": "%usb_serial.port_remove%",
              "probe": "%usb_serial.probe%",
              "release": "%usb_serial.release%",
              "resume": "%usb_serial.resume%",
              "suspend": "%usb_serial.suspend%",
              "write": "%usb_serial.write%"
            },
            "headers": [
              "linux/usb.h",
              "linux/usb/serial.h"
            ]
          }
        },
        "resources": {
          "tty_struct": {
            "declaration": "struct tty_struct *str",
            "header": "linux/tty.h",
            "implemented in kernel": true
          },
          "usb_device_id": {
            "declaration": "const struct usb_device_id *id",
            "header": "linux/mod_devicetable.h",
            "implemented in kernel": false
          },
          "usb_serial": {
            "declaration": "struct usb_serial *serial",
            "headers": [
              "linux/usb.h",
              "linux/usb/serial.h"
            ],
            "implemented in kernel": true
          },
          "usb_serial_port": {
            "declaration": "struct usb_serial_port *port",
            "headers": [
              "linux/usb.h",
              "linux/usb/serial.h"
            ],
            "implemented in kernel": true
          }
        }
      }
    },
    "functions models": {
      "usb_serial_deregister": {
        "declaration": "void usb_serial_deregister(*%usb_serial.usb_serial_driver%)",
        "headers": [
          "linux/usb.h",
          "linux/usb/serial.h"
        ]
      },
      "usb_serial_register": {
        "declaration": "int usb_serial_register(*%usb_serial.usb_serial_driver%)",
        "headers": [
          "linux/usb.h",
          "linux/usb/serial.h"
        ]
      }
    }
  }
}