{
  "3.14": {
    "environment processes": {
      "tty_port_scenario": {
        "actions": {
          "activate_failed": {
            "comment": "Port activation has failed.",
            "condition": [
              "%ret% != 0"
            ]
          },
          "activate_success": {
            "comment": "Port activation has been successfull.",
            "condition": [
              "%ret% == 0"
            ]
          },
          "deregister": {
            "condition": [
              "%tty_port% == $ARG1"
            ],
            "parameters": [
              "%tty_port%",
              "%tty_port_operations%"
            ]
          },
          "init": {
            "comment": "Extract tty_struct value from port.",
            "statements": [
              "%tty_struct% = %tty_port%->tty;"
            ]
          },
          "main": {
            "comment": "Install tty or deregister.",
            "process": "[port_activate].(<activate_success>.[port_shutdown] | <activate_failed>).{main} | (deregister)"
          },
          "port_activate": {
            "callback": "%tty_port_operations.port_activate%",
            "callback return value": "%ret%",
            "parameters": [
              "%tty_port%",
              "%tty_struct%"
            ],
            "post-call": [
              "%ret% = ldv_filter_err_code(%ret%);"
            ]
          },
          "port_shutdown": {
            "callback": "%tty_port_operations.port_shutdown%",
            "parameters": [
              "%tty_port%"
            ]
          },
          "register": {
            "parameters": [
              "%tty_port%",
              "%tty_port_operations%"
            ]
          }
        },
        "comment": "Invoke tty callbacks",
        "labels": {
          "ret": {
            "declaration": "int a",
            "value": "1"
          },
          "tty_port": {
            "interface": [
              "tty_port.tty_port"
            ],
            "resource": true
          },
          "tty_port_operations": {
            "container": true,
            "interface": [
              "tty_port.tty_port_operations"
            ]
          },
          "tty_struct": {
            "declaration": "struct tty_struct *str",
            "header": "linux/tty.h"
          }
        },
        "process": "(!register).<init>.{main}",
        "reference": true
      }
    },
    "functions models": {
      "tty_port_register_device": {
        "headers": ["linux/device.h"],
        "actions": {
          "alloc": {
            "comment": "Allocate memory for device structure and get port and tty driver structures.",
            "statements": [
              "$ALLOC(%device%);",
              "%tty_port% = $ARG1;",
              "%tty_port_operations% = %tty_port%->ops;"
            ]
          },
          "fail": {
            "comment": "Failed to register a new tty device.",
            "statements": [
              "return ERR_PTR(-ENOMEM);"
            ]
          },
          "register": {
            "parameters": [
              "%tty_port%",
              "%tty_port_operations%"
            ]
          },
          "success": {
            "comment": "Successfully registered a new tty device.",
            "statements": [
              "return %device%;"
            ]
          }
        },
        "comment": "Register new tty device.",
        "labels": {
          "device": {
            "declaration": "struct device *"
          },
          "tty_port": {
            "interface": [
              "tty_port.tty_port"
            ],
            "parameter": true,
            "resource": true
          },
          "tty_port_operations": {
            "container": true,
            "interface": [
              "tty_port.tty_port_operations"
            ],
            "pointer": true
          }
        },
        "process": "<alloc>.[register].<success> | <fail>",
        "reference": true
      },
      "tty_port_unregister_device": {
        "actions": {
          "deregister": {
            "parameters": [
              "%tty_port%",
              "%tty_port_operations%"
            ]
          },
          "init": {
            "comment": "Get port.",
            "statements": [
              "%tty_port% = $ARG1;",
              "%tty_port_operations% = %tty_port%->ops;"
            ]
          }
        },
        "comment": "Unregister new tty device.",
        "labels": {
          "tty_port": {
            "interface": [
              "tty_port.tty_port"
            ],
            "parameter": true,
            "resource": true
          },
          "tty_port_operations": {
            "container": true,
            "interface": [
              "tty_port.tty_port_operations"
            ],
            "pointer": true
          }
        },
        "process": "<init>.[deregister]",
        "reference": true
      }
    }
  }
}